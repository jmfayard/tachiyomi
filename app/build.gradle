import java.text.SimpleDateFormat

apply plugin: 'com.android.application'
apply plugin: 'kotlin-android'
apply plugin: 'kotlin-android-extensions'
apply plugin: 'kotlin-kapt'
apply plugin: 'com.github.zellius.shortcut-helper'

shortcutHelper.filePath = './shortcuts.xml'

ext {
    // Git is needed in your system PATH for these commands to work.
    // If it's not installed, you can return a random value as a workaround
    getCommitCount = {
        return 'git rev-list --count HEAD'.execute().text.trim()
        // return "1"
    }

    getGitSha = {
        return 'git rev-parse --short HEAD'.execute().text.trim()
        // return "1"
    }

    getBuildTime = {
        def df = new SimpleDateFormat("yyyy-MM-dd'T'HH:mm'Z'")
        df.setTimeZone(TimeZone.getTimeZone("UTC"))
        return df.format(new Date())
    }
}

android {
    compileSdkVersion 27
    buildToolsVersion '28.0.3'
    publishNonDefault true

    defaultConfig {
        applicationId "eu.kanade.tachiyomi"
        minSdkVersion 16
        targetSdkVersion 27
        testInstrumentationRunner "android.support.test.runner.AndroidJUnitRunner"
        versionCode 38
        versionName "0.8.0"

        buildConfigField "String", "COMMIT_COUNT", "\"${getCommitCount()}\""
        buildConfigField "String", "COMMIT_SHA", "\"${getGitSha()}\""
        buildConfigField "String", "BUILD_TIME", "\"${getBuildTime()}\""
        buildConfigField "boolean", "INCLUDE_UPDATER", "false"

        vectorDrawables.useSupportLibrary = true

        ndk {
            abiFilters "armeabi-v7a", "arm64-v8a", "x86"
        }
    }

    buildTypes {
        debug {
            versionNameSuffix "-${getCommitCount()}"
            applicationIdSuffix ".debug"
            multiDexEnabled true
        }
        release {
            minifyEnabled true
            shrinkResources true
            multiDexEnabled false
            proguardFiles getDefaultProguardFile('proguard-android.txt'), 'proguard-rules.pro'
        }
    }

    flavorDimensions "default"

    productFlavors {
        standard {
            buildConfigField "boolean", "INCLUDE_UPDATER", "true"
            dimension "default"
        }
        fdroid {
            dimension "default"
        }
        dev {
            minSdkVersion 21
            resConfigs "en", "xxhdpi"
            dimension "default"
        }
    }

    packagingOptions {
        exclude 'META-INF/DEPENDENCIES'
        exclude 'LICENSE.txt'
        exclude 'META-INF/LICENSE'
        exclude 'META-INF/LICENSE.txt'
        exclude 'META-INF/NOTICE'
    }

    lintOptions {
        abortOnError false
        checkReleaseBuilds false
    }

}

dependencies {

    // Modified dependencies
    implementation(Libs.subsampling_scale_image_view)
    implementation(Libs.junrar_android)

    // Android support library
    implementation(Libs.support_v4)
    implementation(Libs.appcompat_v7)
    implementation(Libs.cardview_v7)
    implementation(Libs.design)
    implementation(Libs.recyclerview_v7)
    implementation(Libs.preference_v7)
    implementation(Libs.support_annotations)
    implementation(Libs.customtabs)
    implementation(Libs.constraint_layout)
    implementation(Libs.multidex)
    standardImplementation(Libs.firebase_core)

    // ReactiveX
    implementation(Libs.rxandroid)
    implementation(Libs.rxjava)
    implementation(Libs.rxrelay)
    implementation(Libs.rx_preferences)
    implementation(Libs.reactivenetwork)

    // Network client
    implementation(Libs.okhttp)
    implementation(Libs.okio)

    // REST
    implementation(Libs.retrofit)
    implementation(Libs.converter_gson)
    implementation(Libs.adapter_rxjava)

    // JSON
    implementation(Libs.gson)
    implementation(Libs.kotson)

    // JavaScript engine
    implementation(Libs.duktape_android)

    // Disk
    implementation(Libs.disklrucache)
    implementation(Libs.unifile)

    // HTML parser
    implementation(Libs.jsoup)

    // Job scheduling
    implementation(Libs.android_job)
    implementation(Libs.play_services_gcm)

    // Changelog
    implementation(Libs.changelog)

    // Database
    implementation(Libs.sqlite)

    // Model View Presenter
    implementation(Libs.nucleus)
    implementation(Libs.nucleus_support_v7)

    // Dependency injection
    implementation(Libs.injekt_core)

    // Image library
    implementation(Libs.glide)
    implementation(Libs.okhttp3_integration)
    kapt(Libs.com_github_bumptech_glide_compiler)

    // Transformations
    implementation(Libs.glide_transformations)

    // Logging
    implementation(Libs.timber)

    // Crash reports
    implementation(Libs.acra)

    // Sort
    implementation('com.github.gpanther:java-nat-sort:natural-comparator-1.1')

    // UI
    implementation(Libs.material_design_dimens)
    implementation(Libs.com_github_dmytrodanylyk_android_process_button_library)
    implementation(Libs.flexible_adapter)
    implementation(Libs.flexible_adapter_ui)
    implementation(Libs.filepicker)
    implementation(Libs.textdrawable)
    implementation(Libs.com_afollestad_material_dialogs_core)
    implementation(Libs.me_zhanghai_android_systemuihelper_library)
    implementation(Libs.viewstatepageradapter)
    implementation(Libs.slice)
    implementation(Libs.me_gujun_android_taggroup_library)
    implementation(Libs.photoview)
    implementation(Libs.directionalviewpager)

    // Conductor
    implementation(Libs.conductor)
    implementation (Libs.conductor_support) {
        exclude group: "com.android.support"
    }
    implementation(Libs.conductor)

    // RxBindings
    implementation(Libs.rxbinding_kotlin)
    implementation(Libs.rxbinding_appcompat_v7_kotlin)
    implementation(Libs.rxbinding_support_v4_kotlin)
    implementation(Libs.rxbinding_recyclerview_v7_kotlin)

    // Tests
    testImplementation(Libs.junit)
    testImplementation(Libs.assertj_core)
    testImplementation(Libs.mockito_core)

    testImplementation(Libs.robolectric)
    testImplementation(Libs.shadows_multidex)
    testImplementation(Libs.shadows_play_services)

    implementation(Libs.kotlin_stdlib)

    implementation(Libs.kotlinx_coroutines_core)
    implementation(Libs.kotlinx_coroutines_android)
}

buildscript {
    ext.kotlin_version = '1.2.71'
    repositories {
        mavenCentral()
    }
    dependencies {
        classpath "org.jetbrains.kotlin:kotlin-gradle-plugin:$kotlin_version"
    }
}

repositories {
    mavenCentral()
}

kotlin {
    experimental {
        coroutines 'enable'
    }
}

androidExtensions {
    experimental = true
}

if (getGradle().getStartParameter().getTaskRequests().toString().contains("Standard")) {
    apply plugin: 'com.google.gms.google-services'
}
